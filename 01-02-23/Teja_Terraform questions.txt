1. What is Infrastructure as Code?
You write and execute the code to define, deploy, update, and
destroy your infrastructure

2. What are the benefits of IaC?
a. Automation
We can bring up the servers with one script and scale up and down
based on our load with the same script.
b. Reusability of the code
We can reuse the same code
c. Versioning
We can check it into version control and we get versioning. Now we
can see an incremental history of who changed what, how is our
infrastructure actually defined at any given point of time, and
wehave this transparency of documentation
IaC makes changes idempotent, consistent, repeatable, and
predictable.

3. How using IaC make it easy to provision infrastructure?
IaC makes it easy to provision and apply infrastructure
configurations, saving time. It standardizes workflows across
different infrastructure providers (e.g., VMware, AWS, Azure, GCP,
etc.) by using a common syntax across all of them.

4. What is Ideompodent in terms of IaC?
The idempotent characteristic provided by IaC tools ensures that,
even if the same code is applied multiple times, the result remains
the same.

5. What are Day 0 and Day 1 activities?
IaC can be applied throughout the lifecycle, both on the initial
build, as well as throughout the life of the infrastructure.
Commonly, these are referred to as Day 0 and Day 1 activities.
“Day 0” code provisions and configures your initial infrastructure.
“Day 1” refers to OS and application configurations you apply after
you’ve initially built your infrastructure.

6. What are the use cases of Terraform?
Heroku App Setup
Multi-Tier Applications
Self-Service Clusters
Software Demos
Disposable Environments

7. What are the advantages of Terraform?
Platform Agnostic
State Management
Operator Confidence

8. Where do you describe all the components or your entire datacenter so that
Terraform provision those?
Configuration files ends with *.tf7. What are the advantages of Terraform?
Platform Agnostic
State Management
Operator Confidence


9. How can Terraform build infrastructure so efficiently?
Terraform builds a graph of all your resources, and parallelizes the
creation and modification of any non-dependent resources. Because of
this, Terraform builds infrastructure as efficiently as possible,
and operators get insight into dependencies in their infrastructure.

10. What is multi-cloud deployment?
Provisoning your infrastrcutire into multiple cloud providers to
increase fault-tolerance of your applications.

11. How multi-cloud deployment is useful?
By using only a single region or cloud provider, fault tolerance is
limited by the availability of that provider.
Having a multi-cloud deployment allows for more graceful recovery of
the loss of a region or entire provider.

12. What is cloud-agnostic in terms of provisioning tools?
cloud-agnostic and allows a single configuration to be used to
manage multiple providers, and to even handle cross-cloud
dependencies.

13. What is the use of terraform being cloud-agnostic?
It simplifies management and orchestration, helping operators build
large-scale multi-cloud infrastructures.

14. What is the Terraform State?
Every time you run Terraform, it records information about what
infrastructure it created in a Terraform state file.
By default, when you run Terraform in the folder /some/folder,
Terraform creates the file /some/folder/terraform.tfstate.
This file contains a custom JSON format that records a mapping from
the Terraform resources in your configuration files to the representation of those resources in the real world.


15. How do you install terraform on different OS?
// Mac OS
brew install terraform
// Windows
choco install terraform

16. How do you manually install terraform?
step 1: Download the zip fille
step 2: mv ~/Downloads/terraform /usr/local/bin/terraform

17. Where do you put terraform configurations so that you can configure some
behaviors of Terraform itself?
The special terraform configuration block type is used to configure
some behaviors of Terraform itself, such as requiring a minimum
Terraform version to apply your configuration.
terraform {
# ...
}

18. What are the Providers?
A provider is a plugin that Terraform uses to translate the API
interactions with the service. A provider is responsible for
understanding API interactions and exposing resources. Because
Terraform can interact with any API, you can represent almost any
infrastructure type as a resource in Terraform

19. What is Provider initialization and why do we need?
Each time a new provider is added to configuration -- either
explicitly via a provider block or by adding a resource from that
provider -- Terraform must initialize the provider before it can be
used.
Initialization downloads and installs the provider's plugin so that
it can later be executed.

20. How do you initialize any Provider?
Provider initialization is one of the actions of terraform init.
Running this command will download and initialize any providers that
are not already initialized.


